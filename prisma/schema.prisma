generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id                   String                 @id @default(uuid())
  name                 String
  difficulty           Int                    @default(0)
  type                 String
  targetMuscle         String                 @map("target_muscle")
  description          String
  image                String
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  variation            String?
  muscleSeries         MuscleSerie[]
  CardioSerie          CardioSerie[]
  TrainHistoryExercise TrainHistoryExercise[]
}

model User {
  id                   String                 @id @default(uuid())
  name                 String
  email                String                 @unique
  providerId           String                 @map("provider_id")
  active               Boolean                @default(true)
  pictureUrl           String?                @map("picture_url")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  trains               Train[]
  muscleSeries         MuscleSerie[]
  cardioSeries         CardioSerie[]
  TrainHistory         TrainHistory[]
  TrainHistoryExercise TrainHistoryExercise[]
}

model MuscleSerie {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  type             Int      @default(1)
  weight           Float
  repetitionsCount Int      @map("repetitions_count")
  exerciseId       String   @map("exercise_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  Exercise         Exercise @relation(fields: [exerciseId], references: [id])
  User             User     @relation(fields: [userId], references: [id])

  @@map("muscle_series")
}

model CardioSerie {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  exerciseId   String   @map("exercise_id")
  distance     Float
  averageSpeed Float    @map("average_speed")
  maxSpeed     Float    @map("max_speed")
  intensity    Int      @default(1)
  duration     Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  User         User     @relation(fields: [userId], references: [id])
  Exercise     Exercise @relation(fields: [exerciseId], references: [id])

  @@map("cardio_series")
}

model TrainHistory {
  id                   String                 @id @default(uuid())
  userId               String                 @map("user_id")
  trainId              String                 @map("train_id")
  duration             Int
  volume               Float
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  User                 User                   @relation(fields: [userId], references: [id])
  Train                Train                  @relation(fields: [trainId], references: [id])
  TrainHistoryExercise TrainHistoryExercise[]

  @@map("train_histories")
}

model TrainHistoryExercise {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  exerciseId     String       @map("exercise_id")
  trainHistoryId String       @map("train_history_id")
  pauseTime      Int          @map("pause_time")
  seriesCount    Int          @map("series_count")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  Exercise       Exercise     @relation(fields: [exerciseId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
  TrainHistory   TrainHistory @relation(fields: [trainHistoryId], references: [id])

  @@map("train_history_exercises")
}

model Train {
  id           String         @id @default(uuid())
  name         String
  userId       String         @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  weekday      Int
  User         User           @relation(fields: [userId], references: [id])
  TrainHistory TrainHistory[]
}

model Image {
  id        String   @id @default(uuid())
  publicId  String   @unique @map("public_id")
  assetId   String   @unique @map("asset_id")
  url       String
  bytes     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  format    String
}
